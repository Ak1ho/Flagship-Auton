from picamera2 import Picamera2
import cv2
import numpy as np

class RobotDetector:
    def __init__(self):
        # Define color range for robot detection in HSV color space
        self.lower_color = np.array([0, 100, 100])    # Lower HSV bound for red
        self.upper_color = np.array([10, 255, 255])   # Upper HSV bound for red

    def detect_robot(self, frame):
        # Convert the captured frame to RGB first
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # Convert the RGB frame to HSV color space
        # hsv = cv2.cvtColor(frame_rgb, cv2.COLOR_RGB2HSV)
		
        # Create a mask based on the defined color range
        mask = cv2.inRange(hsv, self.lower_color, self.upper_color)

        # Find contours in the mask
        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        if contours:
            # Find the largest contour by area
            c = max(contours, key=cv2.contourArea)
            area = cv2.contourArea(c)
            if area > 500:  # Filter by contour area (threshold adjustable)
                # Calculate the center of the largest contour
                M = cv2.moments(c)
                if M["m00"] != 0:
                    cX = int(M["m10"] / M["m00"])
                    cY = int(M["m01"] / M["m00"])

                    # Determine direction based on the position of the contour center
                    frame_center = frame.shape[1] / 2
                    direction = 'left' if cX < frame_center else 'right'
                    # Optionally, display direction text on the frame
                    cv2.putText(frame, f'Direction: {direction}', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                    # Draw the contour and center point
                    cv2.drawContours(frame, [c], -1, (0, 255, 0), 2)
                    cv2.circle(frame, (cX, cY), 7, (255, 0, 0), -1)
                    return True, direction
        return False, None

# Initialize the Picamera2 object for camera capture
picam2 = Picamera2()

# Configure the camera to capture video (640x480 resolution)
video_config = picam2.create_video_configuration(main={"size": (640, 480)})
picam2.configure(video_config)

# Start the camera for live capture
picam2.start()

# Initialize the robot detector
robot_detector = RobotDetector()

# Display live video feed with detection logic
try:
    while True:
        # Capture a frame from the camera
        frame = picam2.capture_array()

        # Perform robot detection on the captured frame
        detected, direction = robot_detector.detect_robot(frame)

        # Show the frame with detected contour and direction
        cv2.imshow("Live Video", frame)

        # Break the loop when the 'q' key is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
finally:
    # Stop the camera and close the OpenCV window
    picam2.stop()
    cv2.destroyAllWindows()
